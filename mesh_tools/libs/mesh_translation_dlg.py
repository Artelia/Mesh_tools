# -*- coding: utf-8 -*-
"""
/***************************************************************************
 MeshTranslationDialog
                                 A QGIS plugin
 Ouvrir un maillage dont les coordonnées sont relatives à un point de référence
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-10-09
        git sha              : $Format:%H$
        copyright            : (C) 2024 by APN/Artelia
        email                : aurelien.perrin@arteliagroup.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from pyproj import CRS
from pyproj.exceptions import CRSError
from qgis.core import (
    QgsCoordinateReferenceSystem,
    QgsMapLayerProxyModel,
    QgsMeshLayer,
    QgsProject,
)
from qgis.PyQt import uic
from qgis.PyQt.QtWidgets import QMessageBox
from qgis.utils import iface

from ..mesh_tools_dockwidget import MeshToolsDockWidget

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(
    os.path.join(os.path.dirname(__file__), "..", "ui", "mesh_translation.ui")
)


class MeshTranslation(MeshToolsDockWidget, FORM_CLASS):
    """
    Dialog for translating mesh coordinates by modifying the CRS false easting and northing.

    This dialog allows the user to:
        - Select a mesh layer or import a mesh file
        - Specify translation values for X and Y axes
        - Update the mesh's CRS accordingly
    Integrates with QGIS mesh layers and uses PyProj for CRS manipulation.
    """

    def __init__(self, parent=None):
        """
        Initialize the MeshTranslation dialog.

        Sets up the UI, connects signals, and initializes the mesh layer selection.
        """
        super().__init__(parent)
        self.setupUi(self)

        map_crs = iface.mapCanvas().mapSettings().destinationCrs()
        self.cur_layer = None

        self.file_mesh.setFilter("Selafin File (*.slf *.res *.ser *.geo)")
        self.file_mesh.hide()
        self.wgt_crs.setCrs(map_crs)

        self.bt_valid.accepted.connect(self.valide_trans)
        self.bt_valid.rejected.connect(self.reject)

        self.qcb_layer.setFilters(QgsMapLayerProxyModel.MeshLayer)
        self.qcb_layer.setAdditionalItems(["Import file"])
        self.qcb_layer.layerChanged.connect(self.change_qcb_layer)
        self.change_qcb_layer()

    def change_qcb_layer(self):
        """
        Handle changes in the mesh layer combo box selection.
        Shows or hides the file selector depending on the selection.
        """
        self.cur_layer = self.qcb_layer.currentLayer()
        self.file_mesh.hide()
        if self.cur_layer is None:
            self.file_mesh.show()
        elif self.cur_layer is not None:
            self.wgt_crs.setCrs(self.cur_layer.crs())

    def reject(self):
        """
        Close the dialog (called when the user cancels the operation).
        """
        self.close()

    def valide_trans(self):
        """
        Apply the translation to the mesh layer or imported mesh file by updating the CRS.

        Modifies the false easting and northing parameters of the CRS according to the user input.
        If both parameters are found and updated, the mesh layer's CRS is updated
        and the map is refreshed.
        """
        try:
            crs_dict = CRS.from_wkt(self.wgt_crs.crs().toWkt()).to_json_dict()
        except CRSError:
            QMessageBox.information(
                self.iface.mainWindow(), "Information", "Projection not considered"
            )
            return

        x_val, y_val = self.sb_tra_x.value(), self.sb_tra_y.value()
        found_x = found_y = False
        params = crs_dict.get("conversion", {}).get("parameters", [])
        for p in params:
            if p["name"] in ("Easting at false origin", "False easting"):
                p["value"] -= x_val
                found_x = True
            if p["name"] in ("Northing at false origin", "False northing"):
                p["value"] -= y_val
                found_y = True
        if not (found_x and found_y):
            QMessageBox.information(
                self.iface.mainWindow(), "Information", "Projection not considered"
            )
            return

        mesh_crs = QgsCoordinateReferenceSystem()
        mesh_crs.createFromProj4(CRS.from_dict(crs_dict).to_proj4())

        if self.cur_layer is None:
            file = self.file_mesh.filePath()
            mesh_lay = QgsMeshLayer(file, "Tmp Mesh", "mdal")
            if not mesh_lay.isValid():
                QMessageBox.warning(
                    self.iface.mainWindow(), "Warning", "Imported mesh layer is not valid."
                )
                return
            mesh_lay.setCrs(mesh_crs)
            QgsProject.instance().addMapLayer(mesh_lay, True)
        else:
            mesh_lay = self.cur_layer
            if not (isinstance(mesh_lay, QgsMeshLayer) and mesh_lay.isValid()):
                QMessageBox.warning(
                    self.iface.mainWindow(), "Warning", "Selected layer is not a valid mesh layer."
                )
                return
            mesh_lay.setCrs(mesh_crs)
            mesh_lay.triggerRepaint()
            iface.mapCanvas().refresh()
