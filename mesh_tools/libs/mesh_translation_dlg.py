# -*- coding: utf-8 -*-
"""
/***************************************************************************
 MeshTranslationDialog
                                 A QGIS plugin
 Ouvrir un maillage dont les coordonnées sont relatives à un point de référence
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-10-09
        git sha              : $Format:%H$
        copyright            : (C) 2024 by APN/Artelia
        email                : aurelien.perrin@arteliagroup.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.utils import iface
from qgis.core import QgsCoordinateReferenceSystem, QgsMeshLayer, QgsProject

from pyproj import CRS

from ..mesh_tools_dockwidget import MeshToolsDockWidget


# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), "..", "ui", 'mesh_translation.ui'))


class MeshTranslation(MeshToolsDockWidget, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(MeshTranslation, self).__init__(parent)
        self.setupUi(self)

        map_crs = iface.mapCanvas().mapSettings().destinationCrs()

        self.file_mesh.setFilter("Selafin File (*.slf *.res *.ser *.geo)")
        self.wgt_crs.setCrs(map_crs)
        self.bt_valid.accepted.connect(self.valide_trans)
        self.bt_valid.rejected.connect(self.reject)

    def reject(self):
        self.close()

    def valide_trans(self):

        file = self.file_mesh.filePath()
        authid = self.wgt_crs.crs().authid()
        wkt_text = self.wgt_crs.crs().toWkt()

        ori_crs = CRS.from_wkt(wkt_text)
        d_crs = ori_crs.to_json_dict()

        false_east_found = False
        l_x0_name = ['Easting at false origin', 'False easting']
        false_north_found = False
        l_y0_name = ['Northing at false origin', 'False northing']

        # if 'name' in d_crs.keys():
        #     d_crs['name'] = 'Translated {}'.format(d_crs['name'])
        #
        # if 'id' in d_crs.keys():
        #     d_crs['id']['authority'] = 'USER'
        #     d_crs['id']['code'] = 9999

        if 'conversion' in d_crs.keys():
            if 'parameters' in d_crs['conversion'].keys():
                l_param = d_crs['conversion']['parameters']
                for d_param in l_param:
                    if d_param['name'] in l_x0_name:
                        d_param['value'] -= self.sb_tra_x.value()
                        false_east_found = True
                    if d_param['name'] in l_y0_name:
                        d_param['value'] -= self.sb_tra_y.value()
                        false_north_found = True

        if false_east_found and false_north_found:
            print(d_crs)
            new_crs = CRS.from_dict(d_crs)
            print(new_crs.to_proj4())
            mesh_crs = QgsCoordinateReferenceSystem()
            is_ok = mesh_crs.createFromProj4(new_crs.to_proj4())
            print(is_ok)
            print(mesh_crs.toProj4())

            # QgsProject.instance().setCrs(mesh_crs)
            mesh_lay = QgsMeshLayer(file, "Tmp Mesh", "mdal")
            mesh_lay.setCrs(mesh_crs)
            QgsProject.instance().addMapLayer(mesh_lay, True)
        else:
            print("Projection non prise en compte")
            return