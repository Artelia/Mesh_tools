# -*- coding: utf-8 -*-
"""
/***************************************************************************
 TelemacToolsDockWidget
                                 A QGIS plugin
 Tools for Telemac
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-03-24
        git sha              : $Format:%H$
        copyright            : (C) 2021 by APn/Artelia
        email                : a@a
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

from contextlib import suppress
from datetime import datetime

from qgis.PyQt.QtCore import QCoreApplication, pyqtSignal
from qgis.PyQt.QtGui import QColor, QFont
from qgis.PyQt.QtWidgets import QDockWidget


class TelemacToolDockWidget(QDockWidget):
    closingPlugin = pyqtSignal()

    def __init__(self, parent=None):
        super(TelemacToolDockWidget, self).__init__(parent)

    def closeEvent(self, event):
        with suppress(AttributeError, RuntimeError, TypeError):
            self.clean()

        self.closingPlugin.emit()
        event.accept()

    def clean(self):
        pass

    def tr(self, message):
        return QCoreApplication.translate(self.__class__.__name__, message)

    def write_log(self, txt, mode=1):
        self.log.setTextColor(QColor("black"))
        self.log.setFontWeight(QFont.Bold)
        self.log.append(f"{datetime.now().strftime('%H:%M:%S')} - ")
        if mode == 0:
            self.log.setTextColor(QColor("green"))
        elif mode == 1:
            self.log.setTextColor(QColor("black"))
        elif mode == 2:
            self.log.setTextColor(QColor("red"))
        self.log.setFontWeight(QFont.Normal)
        self.log.insertPlainText(txt)
        self.log.verticalScrollBar().setValue(self.log.verticalScrollBar().maximum())
